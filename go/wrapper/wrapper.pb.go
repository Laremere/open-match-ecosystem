// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go/wrapper/wrapper.proto

package wrapper

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	math "math"
	pb "open-match.dev/open-match/pkg/pb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindMatchResponse_State int32

const (
	FindMatchResponse_UNKNOWN     FindMatchResponse_State = 0
	FindMatchResponse_SEARCHING   FindMatchResponse_State = 1
	FindMatchResponse_CANCELED    FindMatchResponse_State = 2
	FindMatchResponse_ERRORED     FindMatchResponse_State = 3
	FindMatchResponse_MATCH_FOUND FindMatchResponse_State = 4
)

var FindMatchResponse_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "SEARCHING",
	2: "CANCELED",
	3: "ERRORED",
	4: "MATCH_FOUND",
}

var FindMatchResponse_State_value = map[string]int32{
	"UNKNOWN":     0,
	"SEARCHING":   1,
	"CANCELED":    2,
	"ERRORED":     3,
	"MATCH_FOUND": 4,
}

func (x FindMatchResponse_State) String() string {
	return proto.EnumName(FindMatchResponse_State_name, int32(x))
}

func (FindMatchResponse_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_270782662a219794, []int{7, 0}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
type GenerateTicketRequest struct {
	FromClient           *any.Any `protobuf:"bytes,1,opt,name=from_client,json=fromClient,proto3" json:"from_client,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateTicketRequest) Reset()         { *m = GenerateTicketRequest{} }
func (m *GenerateTicketRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateTicketRequest) ProtoMessage()    {}
func (*GenerateTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_270782662a219794, []int{0}
}

func (m *GenerateTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateTicketRequest.Unmarshal(m, b)
}
func (m *GenerateTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateTicketRequest.Marshal(b, m, deterministic)
}
func (m *GenerateTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateTicketRequest.Merge(m, src)
}
func (m *GenerateTicketRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateTicketRequest.Size(m)
}
func (m *GenerateTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateTicketRequest proto.InternalMessageInfo

func (m *GenerateTicketRequest) GetFromClient() *any.Any {
	if m != nil {
		return m.FromClient
	}
	return nil
}

type GenerateTicketResponse struct {
	Ticket               *pb.Ticket     `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	Rejected             bool           `protobuf:"varint,2,opt,name=rejected,proto3" json:"rejected,omitempty"`
	Error                *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GenerateTicketResponse) Reset()         { *m = GenerateTicketResponse{} }
func (m *GenerateTicketResponse) String() string { return proto.CompactTextString(m) }
func (*GenerateTicketResponse) ProtoMessage()    {}
func (*GenerateTicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_270782662a219794, []int{1}
}

func (m *GenerateTicketResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateTicketResponse.Unmarshal(m, b)
}
func (m *GenerateTicketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateTicketResponse.Marshal(b, m, deterministic)
}
func (m *GenerateTicketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateTicketResponse.Merge(m, src)
}
func (m *GenerateTicketResponse) XXX_Size() int {
	return xxx_messageInfo_GenerateTicketResponse.Size(m)
}
func (m *GenerateTicketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateTicketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateTicketResponse proto.InternalMessageInfo

func (m *GenerateTicketResponse) GetTicket() *pb.Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *GenerateTicketResponse) GetRejected() bool {
	if m != nil {
		return m.Rejected
	}
	return false
}

func (m *GenerateTicketResponse) GetError() *status.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
type GetProfilesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProfilesRequest) Reset()         { *m = GetProfilesRequest{} }
func (m *GetProfilesRequest) String() string { return proto.CompactTextString(m) }
func (*GetProfilesRequest) ProtoMessage()    {}
func (*GetProfilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_270782662a219794, []int{2}
}

func (m *GetProfilesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProfilesRequest.Unmarshal(m, b)
}
func (m *GetProfilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProfilesRequest.Marshal(b, m, deterministic)
}
func (m *GetProfilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProfilesRequest.Merge(m, src)
}
func (m *GetProfilesRequest) XXX_Size() int {
	return xxx_messageInfo_GetProfilesRequest.Size(m)
}
func (m *GetProfilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProfilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProfilesRequest proto.InternalMessageInfo

type GetProfilesResponse struct {
	Profiles []*pb.MatchProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
	// How long to use this set of profiles before querying again.
	CacheMillis          int64    `protobuf:"varint,2,opt,name=cacheMillis,proto3" json:"cacheMillis,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProfilesResponse) Reset()         { *m = GetProfilesResponse{} }
func (m *GetProfilesResponse) String() string { return proto.CompactTextString(m) }
func (*GetProfilesResponse) ProtoMessage()    {}
func (*GetProfilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_270782662a219794, []int{3}
}

func (m *GetProfilesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProfilesResponse.Unmarshal(m, b)
}
func (m *GetProfilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProfilesResponse.Marshal(b, m, deterministic)
}
func (m *GetProfilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProfilesResponse.Merge(m, src)
}
func (m *GetProfilesResponse) XXX_Size() int {
	return xxx_messageInfo_GetProfilesResponse.Size(m)
}
func (m *GetProfilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProfilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProfilesResponse proto.InternalMessageInfo

func (m *GetProfilesResponse) GetProfiles() []*pb.MatchProfile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *GetProfilesResponse) GetCacheMillis() int64 {
	if m != nil {
		return m.CacheMillis
	}
	return 0
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
type AllocateMatchRequest struct {
	Match                *pb.Match `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AllocateMatchRequest) Reset()         { *m = AllocateMatchRequest{} }
func (m *AllocateMatchRequest) String() string { return proto.CompactTextString(m) }
func (*AllocateMatchRequest) ProtoMessage()    {}
func (*AllocateMatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_270782662a219794, []int{4}
}

func (m *AllocateMatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateMatchRequest.Unmarshal(m, b)
}
func (m *AllocateMatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateMatchRequest.Marshal(b, m, deterministic)
}
func (m *AllocateMatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateMatchRequest.Merge(m, src)
}
func (m *AllocateMatchRequest) XXX_Size() int {
	return xxx_messageInfo_AllocateMatchRequest.Size(m)
}
func (m *AllocateMatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateMatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateMatchRequest proto.InternalMessageInfo

func (m *AllocateMatchRequest) GetMatch() *pb.Match {
	if m != nil {
		return m.Match
	}
	return nil
}

type AllocateMatchResponse struct {
	IdsToAssignments map[string]*pb.Assignment `protobuf:"bytes,1,rep,name=ids_to_assignments,json=idsToAssignments,proto3" json:"ids_to_assignments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Error when finding an Assignments for these Tickets.
	Error                *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AllocateMatchResponse) Reset()         { *m = AllocateMatchResponse{} }
func (m *AllocateMatchResponse) String() string { return proto.CompactTextString(m) }
func (*AllocateMatchResponse) ProtoMessage()    {}
func (*AllocateMatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_270782662a219794, []int{5}
}

func (m *AllocateMatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocateMatchResponse.Unmarshal(m, b)
}
func (m *AllocateMatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocateMatchResponse.Marshal(b, m, deterministic)
}
func (m *AllocateMatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateMatchResponse.Merge(m, src)
}
func (m *AllocateMatchResponse) XXX_Size() int {
	return xxx_messageInfo_AllocateMatchResponse.Size(m)
}
func (m *AllocateMatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateMatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateMatchResponse proto.InternalMessageInfo

func (m *AllocateMatchResponse) GetIdsToAssignments() map[string]*pb.Assignment {
	if m != nil {
		return m.IdsToAssignments
	}
	return nil
}

func (m *AllocateMatchResponse) GetError() *status.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

type FindMatchRequest struct {
	// Data for creating a ticket from the game client. Can only be set on first request.
	FromClient *any.Any `protobuf:"bytes,1,opt,name=from_client,json=fromClient,proto3" json:"from_client,omitempty"`
	// Request to cancel searching.  Note: Clients should wait until they have received
	// a state of canceled before disconnecting.  They may instead receive a match found,
	// due to finding a match before the cancelation request could be processed.
	Cancel               bool     `protobuf:"varint,2,opt,name=cancel,proto3" json:"cancel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMatchRequest) Reset()         { *m = FindMatchRequest{} }
func (m *FindMatchRequest) String() string { return proto.CompactTextString(m) }
func (*FindMatchRequest) ProtoMessage()    {}
func (*FindMatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_270782662a219794, []int{6}
}

func (m *FindMatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMatchRequest.Unmarshal(m, b)
}
func (m *FindMatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMatchRequest.Marshal(b, m, deterministic)
}
func (m *FindMatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMatchRequest.Merge(m, src)
}
func (m *FindMatchRequest) XXX_Size() int {
	return xxx_messageInfo_FindMatchRequest.Size(m)
}
func (m *FindMatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindMatchRequest proto.InternalMessageInfo

func (m *FindMatchRequest) GetFromClient() *any.Any {
	if m != nil {
		return m.FromClient
	}
	return nil
}

func (m *FindMatchRequest) GetCancel() bool {
	if m != nil {
		return m.Cancel
	}
	return false
}

type FindMatchResponse struct {
	State                FindMatchResponse_State `protobuf:"varint,1,opt,name=state,proto3,enum=openmatchecosystem.wrapper.FindMatchResponse_State" json:"state,omitempty"`
	Assignment           *pb.Assignment          `protobuf:"bytes,2,opt,name=assignment,proto3" json:"assignment,omitempty"`
	Error                *status.Status          `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FindMatchResponse) Reset()         { *m = FindMatchResponse{} }
func (m *FindMatchResponse) String() string { return proto.CompactTextString(m) }
func (*FindMatchResponse) ProtoMessage()    {}
func (*FindMatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_270782662a219794, []int{7}
}

func (m *FindMatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMatchResponse.Unmarshal(m, b)
}
func (m *FindMatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMatchResponse.Marshal(b, m, deterministic)
}
func (m *FindMatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMatchResponse.Merge(m, src)
}
func (m *FindMatchResponse) XXX_Size() int {
	return xxx_messageInfo_FindMatchResponse.Size(m)
}
func (m *FindMatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindMatchResponse proto.InternalMessageInfo

func (m *FindMatchResponse) GetState() FindMatchResponse_State {
	if m != nil {
		return m.State
	}
	return FindMatchResponse_UNKNOWN
}

func (m *FindMatchResponse) GetAssignment() *pb.Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func (m *FindMatchResponse) GetError() *status.Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterEnum("openmatchecosystem.wrapper.FindMatchResponse_State", FindMatchResponse_State_name, FindMatchResponse_State_value)
	proto.RegisterType((*GenerateTicketRequest)(nil), "openmatchecosystem.wrapper.GenerateTicketRequest")
	proto.RegisterType((*GenerateTicketResponse)(nil), "openmatchecosystem.wrapper.GenerateTicketResponse")
	proto.RegisterType((*GetProfilesRequest)(nil), "openmatchecosystem.wrapper.GetProfilesRequest")
	proto.RegisterType((*GetProfilesResponse)(nil), "openmatchecosystem.wrapper.GetProfilesResponse")
	proto.RegisterType((*AllocateMatchRequest)(nil), "openmatchecosystem.wrapper.AllocateMatchRequest")
	proto.RegisterType((*AllocateMatchResponse)(nil), "openmatchecosystem.wrapper.AllocateMatchResponse")
	proto.RegisterMapType((map[string]*pb.Assignment)(nil), "openmatchecosystem.wrapper.AllocateMatchResponse.IdsToAssignmentsEntry")
	proto.RegisterType((*FindMatchRequest)(nil), "openmatchecosystem.wrapper.FindMatchRequest")
	proto.RegisterType((*FindMatchResponse)(nil), "openmatchecosystem.wrapper.FindMatchResponse")
}

func init() { proto.RegisterFile("go/wrapper/wrapper.proto", fileDescriptor_270782662a219794) }

var fileDescriptor_270782662a219794 = []byte{
	// 708 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x6f, 0xda, 0x48,
	0x14, 0x5e, 0xc3, 0x92, 0x85, 0xe7, 0x4d, 0xe2, 0xcc, 0x86, 0x84, 0xe5, 0xc4, 0xfa, 0xb0, 0x62,
	0xb5, 0x8d, 0x9d, 0x38, 0x8a, 0x54, 0xf5, 0x50, 0x89, 0x02, 0x21, 0x51, 0x1b, 0xa8, 0x9c, 0x44,
	0x95, 0x72, 0x41, 0x8e, 0x79, 0x21, 0x6e, 0x8c, 0xc7, 0x9d, 0x19, 0x12, 0x71, 0x6b, 0x8f, 0xed,
	0xa9, 0x87, 0xfe, 0xc1, 0x15, 0xe3, 0x31, 0xbf, 0x9a, 0xa2, 0xd0, 0x0b, 0x30, 0xef, 0x7d, 0xef,
	0x9b, 0xf7, 0x3e, 0xde, 0x67, 0x43, 0xa9, 0x4f, 0xed, 0x07, 0xe6, 0xc5, 0x31, 0xb2, 0xf4, 0xdb,
	0x8a, 0x19, 0x15, 0x94, 0x94, 0x69, 0x8c, 0xd1, 0xc0, 0x13, 0xfe, 0x2d, 0xfa, 0x94, 0x8f, 0xb8,
	0xc0, 0x81, 0xa5, 0x10, 0xe5, 0x7f, 0xc6, 0xb9, 0x3d, 0x99, 0xb4, 0x7a, 0x78, 0x6f, 0x7b, 0x71,
	0x60, 0x0f, 0x90, 0x73, 0xaf, 0x8f, 0x3c, 0x29, 0x2f, 0xef, 0xf6, 0x29, 0xed, 0x87, 0x68, 0xb3,
	0xd8, 0xb7, 0xb9, 0xf0, 0xc4, 0x30, 0x4d, 0xfc, 0xad, 0x12, 0xf2, 0x74, 0x3d, 0xbc, 0xb1, 0xbd,
	0x68, 0x94, 0xa4, 0xcc, 0x36, 0x14, 0x5b, 0x18, 0x21, 0xf3, 0x04, 0x5e, 0x04, 0xfe, 0x1d, 0x0a,
	0x17, 0x3f, 0x0c, 0x91, 0x0b, 0x72, 0x04, 0xfa, 0x0d, 0xa3, 0x83, 0xae, 0x1f, 0x06, 0x18, 0x89,
	0x92, 0x56, 0xd1, 0xaa, 0xba, 0xb3, 0x6d, 0x25, 0x4c, 0x56, 0xca, 0x64, 0xd5, 0xa2, 0x91, 0x0b,
	0x63, 0x60, 0x5d, 0xe2, 0xcc, 0xcf, 0x1a, 0xec, 0x2c, 0x12, 0xf2, 0x98, 0x46, 0x1c, 0xc9, 0x7f,
	0xb0, 0x26, 0x64, 0x44, 0x91, 0x6d, 0x59, 0x93, 0x71, 0x2d, 0x05, 0x55, 0x00, 0x52, 0x86, 0x3c,
	0xc3, 0xf7, 0xe8, 0x0b, 0xec, 0x95, 0x32, 0x15, 0xad, 0x9a, 0x77, 0x27, 0x67, 0x52, 0x85, 0x1c,
	0x32, 0x46, 0x59, 0x29, 0x2b, 0x59, 0x48, 0xda, 0x12, 0x8b, 0x7d, 0xeb, 0x5c, 0x4e, 0xed, 0x26,
	0x00, 0x73, 0x1b, 0x48, 0x0b, 0xc5, 0x5b, 0x46, 0x6f, 0x82, 0x10, 0xb9, 0x1a, 0xcc, 0x0c, 0xe1,
	0xaf, 0xb9, 0xa8, 0xea, 0xee, 0x10, 0xf2, 0xb1, 0x8a, 0x95, 0xb4, 0x4a, 0xb6, 0xaa, 0x3b, 0xbb,
	0x33, 0xfd, 0x9d, 0x8d, 0x3f, 0x55, 0x8d, 0x3b, 0x01, 0x92, 0x0a, 0xe8, 0xbe, 0xe7, 0xdf, 0xe2,
	0x59, 0x10, 0x86, 0x01, 0x97, 0xad, 0x66, 0xdd, 0xd9, 0x90, 0xf9, 0x12, 0xb6, 0x6b, 0x61, 0x48,
	0x7d, 0x4f, 0xa0, 0xe4, 0x48, 0xe5, 0xfd, 0x17, 0x72, 0x92, 0x59, 0x69, 0x61, 0x2c, 0xde, 0xe5,
	0x26, 0x69, 0xf3, 0x5b, 0x06, 0x8a, 0x0b, 0x04, 0xaa, 0xe1, 0x21, 0x90, 0xa0, 0xc7, 0xbb, 0x82,
	0x76, 0x3d, 0xce, 0x83, 0x7e, 0x34, 0xc0, 0x48, 0xa4, 0xad, 0xb7, 0xac, 0x9f, 0x6f, 0x92, 0xf5,
	0x28, 0x9d, 0x75, 0xda, 0xe3, 0x17, 0xb4, 0x36, 0x65, 0x6a, 0x46, 0x82, 0x8d, 0x5c, 0x23, 0x58,
	0x08, 0x3f, 0x5d, 0xfe, 0xf2, 0x15, 0x14, 0x1f, 0x25, 0x25, 0x06, 0x64, 0xef, 0x70, 0x24, 0x27,
	0x2f, 0xb8, 0xe3, 0x9f, 0xe4, 0x7f, 0xc8, 0xdd, 0x7b, 0xe1, 0x10, 0xa5, 0x82, 0xba, 0x53, 0x9c,
	0x51, 0x63, 0x5a, 0xed, 0x26, 0x98, 0x17, 0x99, 0xe7, 0x9a, 0xe9, 0x81, 0x71, 0x1c, 0x44, 0xbd,
	0x39, 0x49, 0x7f, 0x6d, 0x63, 0xc9, 0x0e, 0xac, 0xf9, 0x5e, 0xe4, 0x63, 0xa8, 0x36, 0x4d, 0x9d,
	0xcc, 0xaf, 0x19, 0xd8, 0x9a, 0xb9, 0x43, 0xa9, 0x7e, 0x0a, 0xb9, 0xb1, 0xb5, 0x50, 0xd2, 0x6f,
	0x38, 0x87, 0xcb, 0x84, 0xfe, 0xa1, 0x5a, 0x0a, 0x84, 0x6e, 0xc2, 0x40, 0x8e, 0x00, 0xa6, 0xff,
	0xdc, 0xf2, 0xc9, 0x67, 0x80, 0x2b, 0xec, 0x7f, 0x07, 0x72, 0xf2, 0x42, 0xa2, 0xc3, 0x1f, 0x97,
	0xed, 0xd7, 0xed, 0xce, 0xbb, 0xb6, 0xf1, 0x1b, 0x59, 0x87, 0xc2, 0x79, 0xb3, 0xe6, 0xd6, 0x4f,
	0x4e, 0xdb, 0x2d, 0x43, 0x23, 0x7f, 0x42, 0xbe, 0x5e, 0x6b, 0xd7, 0x9b, 0x6f, 0x9a, 0x0d, 0x23,
	0x33, 0x46, 0x36, 0x5d, 0xb7, 0xe3, 0x36, 0x1b, 0x46, 0x96, 0x6c, 0x82, 0x7e, 0x56, 0xbb, 0xa8,
	0x9f, 0x74, 0x8f, 0x3b, 0x97, 0xed, 0x86, 0xf1, 0xbb, 0xf3, 0x45, 0x83, 0xcd, 0xc4, 0xa9, 0xca,
	0xe2, 0x94, 0x91, 0x07, 0xd8, 0x98, 0xf7, 0x3b, 0x39, 0x58, 0xa6, 0xc9, 0xa3, 0x0f, 0x9b, 0xb2,
	0xb3, 0x4a, 0x49, 0xa2, 0xa5, 0xf3, 0x51, 0x83, 0x8d, 0xd4, 0xc5, 0xe7, 0x74, 0xc8, 0x7c, 0x24,
	0x11, 0xe8, 0x33, 0xd6, 0x26, 0xd6, 0x72, 0xd6, 0xc5, 0x27, 0x43, 0xd9, 0x7e, 0x32, 0x5e, 0xb5,
	0xf0, 0x49, 0x83, 0x42, 0xea, 0x26, 0x46, 0x04, 0xac, 0xcf, 0x59, 0x8b, 0xec, 0xaf, 0xe0, 0xc2,
	0xa4, 0x83, 0x83, 0x95, 0x7d, 0xeb, 0x8c, 0xa0, 0x70, 0xcc, 0x68, 0x24, 0x1a, 0x94, 0x32, 0x12,
	0x42, 0x61, 0xb2, 0x74, 0xe4, 0xd9, 0x13, 0x77, 0x33, 0xb9, 0x7a, 0x6f, 0xa5, 0x4d, 0xae, 0x6a,
	0xfb, 0xda, 0xab, 0xfd, 0x2b, 0x6b, 0xe1, 0xa5, 0x34, 0x3d, 0xee, 0x4d, 0x48, 0xec, 0xe9, 0xeb,
	0xee, 0x7a, 0x4d, 0xba, 0xf0, 0xf0, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xee, 0x34, 0xba,
	0x03, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TicketGeneratorClient is the client API for TicketGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TicketGeneratorClient interface {
	GenerateTicket(ctx context.Context, in *GenerateTicketRequest, opts ...grpc.CallOption) (*GenerateTicketResponse, error)
}

type ticketGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewTicketGeneratorClient(cc *grpc.ClientConn) TicketGeneratorClient {
	return &ticketGeneratorClient{cc}
}

func (c *ticketGeneratorClient) GenerateTicket(ctx context.Context, in *GenerateTicketRequest, opts ...grpc.CallOption) (*GenerateTicketResponse, error) {
	out := new(GenerateTicketResponse)
	err := c.cc.Invoke(ctx, "/openmatchecosystem.wrapper.TicketGenerator/GenerateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketGeneratorServer is the server API for TicketGenerator service.
type TicketGeneratorServer interface {
	GenerateTicket(context.Context, *GenerateTicketRequest) (*GenerateTicketResponse, error)
}

// UnimplementedTicketGeneratorServer can be embedded to have forward compatible implementations.
type UnimplementedTicketGeneratorServer struct {
}

func (*UnimplementedTicketGeneratorServer) GenerateTicket(ctx context.Context, req *GenerateTicketRequest) (*GenerateTicketResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GenerateTicket not implemented")
}

func RegisterTicketGeneratorServer(s *grpc.Server, srv TicketGeneratorServer) {
	s.RegisterService(&_TicketGenerator_serviceDesc, srv)
}

func _TicketGenerator_GenerateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketGeneratorServer).GenerateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatchecosystem.wrapper.TicketGenerator/GenerateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketGeneratorServer).GenerateTicket(ctx, req.(*GenerateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TicketGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmatchecosystem.wrapper.TicketGenerator",
	HandlerType: (*TicketGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateTicket",
			Handler:    _TicketGenerator_GenerateTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/wrapper/wrapper.proto",
}

// ProfilesSourceClient is the client API for ProfilesSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfilesSourceClient interface {
	GetProfiles(ctx context.Context, in *GetProfilesRequest, opts ...grpc.CallOption) (*GetProfilesResponse, error)
}

type profilesSourceClient struct {
	cc *grpc.ClientConn
}

func NewProfilesSourceClient(cc *grpc.ClientConn) ProfilesSourceClient {
	return &profilesSourceClient{cc}
}

func (c *profilesSourceClient) GetProfiles(ctx context.Context, in *GetProfilesRequest, opts ...grpc.CallOption) (*GetProfilesResponse, error) {
	out := new(GetProfilesResponse)
	err := c.cc.Invoke(ctx, "/openmatchecosystem.wrapper.ProfilesSource/GetProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilesSourceServer is the server API for ProfilesSource service.
type ProfilesSourceServer interface {
	GetProfiles(context.Context, *GetProfilesRequest) (*GetProfilesResponse, error)
}

// UnimplementedProfilesSourceServer can be embedded to have forward compatible implementations.
type UnimplementedProfilesSourceServer struct {
}

func (*UnimplementedProfilesSourceServer) GetProfiles(ctx context.Context, req *GetProfilesRequest) (*GetProfilesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProfiles not implemented")
}

func RegisterProfilesSourceServer(s *grpc.Server, srv ProfilesSourceServer) {
	s.RegisterService(&_ProfilesSource_serviceDesc, srv)
}

func _ProfilesSource_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesSourceServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatchecosystem.wrapper.ProfilesSource/GetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesSourceServer).GetProfiles(ctx, req.(*GetProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProfilesSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmatchecosystem.wrapper.ProfilesSource",
	HandlerType: (*ProfilesSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfiles",
			Handler:    _ProfilesSource_GetProfiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/wrapper/wrapper.proto",
}

// AllocaterClient is the client API for Allocater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AllocaterClient interface {
	AllocateMatch(ctx context.Context, in *AllocateMatchRequest, opts ...grpc.CallOption) (*AllocateMatchResponse, error)
}

type allocaterClient struct {
	cc *grpc.ClientConn
}

func NewAllocaterClient(cc *grpc.ClientConn) AllocaterClient {
	return &allocaterClient{cc}
}

func (c *allocaterClient) AllocateMatch(ctx context.Context, in *AllocateMatchRequest, opts ...grpc.CallOption) (*AllocateMatchResponse, error) {
	out := new(AllocateMatchResponse)
	err := c.cc.Invoke(ctx, "/openmatchecosystem.wrapper.Allocater/AllocateMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllocaterServer is the server API for Allocater service.
type AllocaterServer interface {
	AllocateMatch(context.Context, *AllocateMatchRequest) (*AllocateMatchResponse, error)
}

// UnimplementedAllocaterServer can be embedded to have forward compatible implementations.
type UnimplementedAllocaterServer struct {
}

func (*UnimplementedAllocaterServer) AllocateMatch(ctx context.Context, req *AllocateMatchRequest) (*AllocateMatchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method AllocateMatch not implemented")
}

func RegisterAllocaterServer(s *grpc.Server, srv AllocaterServer) {
	s.RegisterService(&_Allocater_serviceDesc, srv)
}

func _Allocater_AllocateMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocaterServer).AllocateMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openmatchecosystem.wrapper.Allocater/AllocateMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocaterServer).AllocateMatch(ctx, req.(*AllocateMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Allocater_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmatchecosystem.wrapper.Allocater",
	HandlerType: (*AllocaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateMatch",
			Handler:    _Allocater_AllocateMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/wrapper/wrapper.proto",
}

// FrontDoorClient is the client API for FrontDoor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontDoorClient interface {
	FindMatch(ctx context.Context, opts ...grpc.CallOption) (FrontDoor_FindMatchClient, error)
}

type frontDoorClient struct {
	cc *grpc.ClientConn
}

func NewFrontDoorClient(cc *grpc.ClientConn) FrontDoorClient {
	return &frontDoorClient{cc}
}

func (c *frontDoorClient) FindMatch(ctx context.Context, opts ...grpc.CallOption) (FrontDoor_FindMatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FrontDoor_serviceDesc.Streams[0], "/openmatchecosystem.wrapper.FrontDoor/FindMatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontDoorFindMatchClient{stream}
	return x, nil
}

type FrontDoor_FindMatchClient interface {
	Send(*FindMatchRequest) error
	Recv() (*FindMatchResponse, error)
	grpc.ClientStream
}

type frontDoorFindMatchClient struct {
	grpc.ClientStream
}

func (x *frontDoorFindMatchClient) Send(m *FindMatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontDoorFindMatchClient) Recv() (*FindMatchResponse, error) {
	m := new(FindMatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrontDoorServer is the server API for FrontDoor service.
type FrontDoorServer interface {
	FindMatch(FrontDoor_FindMatchServer) error
}

// UnimplementedFrontDoorServer can be embedded to have forward compatible implementations.
type UnimplementedFrontDoorServer struct {
}

func (*UnimplementedFrontDoorServer) FindMatch(srv FrontDoor_FindMatchServer) error {
	return status1.Errorf(codes.Unimplemented, "method FindMatch not implemented")
}

func RegisterFrontDoorServer(s *grpc.Server, srv FrontDoorServer) {
	s.RegisterService(&_FrontDoor_serviceDesc, srv)
}

func _FrontDoor_FindMatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontDoorServer).FindMatch(&frontDoorFindMatchServer{stream})
}

type FrontDoor_FindMatchServer interface {
	Send(*FindMatchResponse) error
	Recv() (*FindMatchRequest, error)
	grpc.ServerStream
}

type frontDoorFindMatchServer struct {
	grpc.ServerStream
}

func (x *frontDoorFindMatchServer) Send(m *FindMatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontDoorFindMatchServer) Recv() (*FindMatchRequest, error) {
	m := new(FindMatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FrontDoor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openmatchecosystem.wrapper.FrontDoor",
	HandlerType: (*FrontDoorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindMatch",
			Handler:       _FrontDoor_FindMatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "go/wrapper/wrapper.proto",
}
